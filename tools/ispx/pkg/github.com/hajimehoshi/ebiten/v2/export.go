// export by github.com/goplus/igop/cmd/qexp

package ebiten

import (
	q "github.com/hajimehoshi/ebiten/v2"

	"go/constant"
	"reflect"

	"github.com/goplus/igop"
)

func init() {
	igop.RegisterPackage(&igop.Package{
		Name: "ebiten",
		Path: "github.com/hajimehoshi/ebiten/v2",
		Deps: map[string]string{
			"errors": "errors",
			"fmt":    "fmt",
			"github.com/hajimehoshi/ebiten/v2/internal/affine":          "affine",
			"github.com/hajimehoshi/ebiten/v2/internal/atlas":           "atlas",
			"github.com/hajimehoshi/ebiten/v2/internal/builtinshader":   "builtinshader",
			"github.com/hajimehoshi/ebiten/v2/internal/clock":           "clock",
			"github.com/hajimehoshi/ebiten/v2/internal/debug":           "debug",
			"github.com/hajimehoshi/ebiten/v2/internal/gamepad":         "gamepad",
			"github.com/hajimehoshi/ebiten/v2/internal/gamepaddb":       "gamepaddb",
			"github.com/hajimehoshi/ebiten/v2/internal/graphics":        "graphics",
			"github.com/hajimehoshi/ebiten/v2/internal/graphicscommand": "graphicscommand",
			"github.com/hajimehoshi/ebiten/v2/internal/graphicsdriver":  "graphicsdriver",
			"github.com/hajimehoshi/ebiten/v2/internal/shaderir":        "shaderir",
			"github.com/hajimehoshi/ebiten/v2/internal/ui":              "ui",
			"github.com/hajimehoshi/ebiten/v2/internal/vibrate":         "vibrate",
			"image":         "image",
			"image/color":   "color",
			"image/draw":    "draw",
			"io/fs":         "fs",
			"math":          "math",
			"os":            "os",
			"path/filepath": "filepath",
			"runtime":       "runtime",
			"strings":       "strings",
			"sync":          "sync",
			"sync/atomic":   "atomic",
			"time":          "time",
		},
		Interfaces: map[string]reflect.Type{
			"FinalScreen":       reflect.TypeOf((*q.FinalScreen)(nil)).Elem(),
			"FinalScreenDrawer": reflect.TypeOf((*q.FinalScreenDrawer)(nil)).Elem(),
			"Game":              reflect.TypeOf((*q.Game)(nil)).Elem(),
			"LayoutFer":         reflect.TypeOf((*q.LayoutFer)(nil)).Elem(),
		},
		NamedTypes: map[string]reflect.Type{
			"Address":                    reflect.TypeOf((*q.Address)(nil)).Elem(),
			"Blend":                      reflect.TypeOf((*q.Blend)(nil)).Elem(),
			"BlendFactor":                reflect.TypeOf((*q.BlendFactor)(nil)).Elem(),
			"BlendOperation":             reflect.TypeOf((*q.BlendOperation)(nil)).Elem(),
			"ColorM":                     reflect.TypeOf((*q.ColorM)(nil)).Elem(),
			"ColorScale":                 reflect.TypeOf((*q.ColorScale)(nil)).Elem(),
			"ColorScaleMode":             reflect.TypeOf((*q.ColorScaleMode)(nil)).Elem(),
			"CompositeMode":              reflect.TypeOf((*q.CompositeMode)(nil)).Elem(),
			"DebugInfo":                  reflect.TypeOf((*q.DebugInfo)(nil)).Elem(),
			"DrawImageOptions":           reflect.TypeOf((*q.DrawImageOptions)(nil)).Elem(),
			"DrawRectShaderOptions":      reflect.TypeOf((*q.DrawRectShaderOptions)(nil)).Elem(),
			"DrawTrianglesOptions":       reflect.TypeOf((*q.DrawTrianglesOptions)(nil)).Elem(),
			"DrawTrianglesShaderOptions": reflect.TypeOf((*q.DrawTrianglesShaderOptions)(nil)).Elem(),
			"FillRule":                   reflect.TypeOf((*q.FillRule)(nil)).Elem(),
			"Filter":                     reflect.TypeOf((*q.Filter)(nil)).Elem(),
			"GeoM":                       reflect.TypeOf((*q.GeoM)(nil)).Elem(),
			"GraphicsLibrary":            reflect.TypeOf((*q.GraphicsLibrary)(nil)).Elem(),
			"Image":                      reflect.TypeOf((*q.Image)(nil)).Elem(),
			"Key":                        reflect.TypeOf((*q.Key)(nil)).Elem(),
			"MonitorType":                reflect.TypeOf((*q.MonitorType)(nil)).Elem(),
			"NewImageFromImageOptions":   reflect.TypeOf((*q.NewImageFromImageOptions)(nil)).Elem(),
			"NewImageOptions":            reflect.TypeOf((*q.NewImageOptions)(nil)).Elem(),
			"RunGameOptions":             reflect.TypeOf((*q.RunGameOptions)(nil)).Elem(),
			"Shader":                     reflect.TypeOf((*q.Shader)(nil)).Elem(),
			"Vertex":                     reflect.TypeOf((*q.Vertex)(nil)).Elem(),
			"VibrateGamepadOptions":      reflect.TypeOf((*q.VibrateGamepadOptions)(nil)).Elem(),
			"VibrateOptions":             reflect.TypeOf((*q.VibrateOptions)(nil)).Elem(),
		},
		AliasTypes: map[string]reflect.Type{
			"CursorModeType":         reflect.TypeOf((*q.CursorModeType)(nil)).Elem(),
			"CursorShapeType":        reflect.TypeOf((*q.CursorShapeType)(nil)).Elem(),
			"FPSModeType":            reflect.TypeOf((*q.FPSModeType)(nil)).Elem(),
			"GamepadAxisType":        reflect.TypeOf((*int)(nil)).Elem(),
			"GamepadButton":          reflect.TypeOf((*q.GamepadButton)(nil)).Elem(),
			"GamepadID":              reflect.TypeOf((*q.GamepadID)(nil)).Elem(),
			"MouseButton":            reflect.TypeOf((*q.MouseButton)(nil)).Elem(),
			"StandardGamepadAxis":    reflect.TypeOf((*q.StandardGamepadAxis)(nil)).Elem(),
			"StandardGamepadButton":  reflect.TypeOf((*q.StandardGamepadButton)(nil)).Elem(),
			"TouchID":                reflect.TypeOf((*q.TouchID)(nil)).Elem(),
			"WindowResizingModeType": reflect.TypeOf((*q.WindowResizingModeType)(nil)).Elem(),
		},
		Vars: map[string]reflect.Value{
			"BlendClear":           reflect.ValueOf(&q.BlendClear),
			"BlendCopy":            reflect.ValueOf(&q.BlendCopy),
			"BlendDestination":     reflect.ValueOf(&q.BlendDestination),
			"BlendDestinationAtop": reflect.ValueOf(&q.BlendDestinationAtop),
			"BlendDestinationIn":   reflect.ValueOf(&q.BlendDestinationIn),
			"BlendDestinationOut":  reflect.ValueOf(&q.BlendDestinationOut),
			"BlendDestinationOver": reflect.ValueOf(&q.BlendDestinationOver),
			"BlendLighter":         reflect.ValueOf(&q.BlendLighter),
			"BlendSourceAtop":      reflect.ValueOf(&q.BlendSourceAtop),
			"BlendSourceIn":        reflect.ValueOf(&q.BlendSourceIn),
			"BlendSourceOut":       reflect.ValueOf(&q.BlendSourceOut),
			"BlendSourceOver":      reflect.ValueOf(&q.BlendSourceOver),
			"BlendXor":             reflect.ValueOf(&q.BlendXor),
			"Termination":          reflect.ValueOf(&q.Termination),
		},
		Funcs: map[string]reflect.Value{
			"ActualFPS":                           reflect.ValueOf(q.ActualFPS),
			"ActualTPS":                           reflect.ValueOf(q.ActualTPS),
			"AppendGamepadIDs":                    reflect.ValueOf(q.AppendGamepadIDs),
			"AppendInputChars":                    reflect.ValueOf(q.AppendInputChars),
			"AppendMonitors":                      reflect.ValueOf(q.AppendMonitors),
			"AppendTouchIDs":                      reflect.ValueOf(q.AppendTouchIDs),
			"CurrentFPS":                          reflect.ValueOf(q.CurrentFPS),
			"CurrentTPS":                          reflect.ValueOf(q.CurrentTPS),
			"CursorMode":                          reflect.ValueOf(q.CursorMode),
			"CursorPosition":                      reflect.ValueOf(q.CursorPosition),
			"CursorShape":                         reflect.ValueOf(q.CursorShape),
			"DeviceScaleFactor":                   reflect.ValueOf(q.DeviceScaleFactor),
			"DroppedFiles":                        reflect.ValueOf(q.DroppedFiles),
			"FPSMode":                             reflect.ValueOf(q.FPSMode),
			"GamepadAxis":                         reflect.ValueOf(q.GamepadAxis),
			"GamepadAxisCount":                    reflect.ValueOf(q.GamepadAxisCount),
			"GamepadAxisNum":                      reflect.ValueOf(q.GamepadAxisNum),
			"GamepadAxisValue":                    reflect.ValueOf(q.GamepadAxisValue),
			"GamepadButtonCount":                  reflect.ValueOf(q.GamepadButtonCount),
			"GamepadButtonNum":                    reflect.ValueOf(q.GamepadButtonNum),
			"GamepadIDs":                          reflect.ValueOf(q.GamepadIDs),
			"GamepadName":                         reflect.ValueOf(q.GamepadName),
			"GamepadSDLID":                        reflect.ValueOf(q.GamepadSDLID),
			"InputChars":                          reflect.ValueOf(q.InputChars),
			"IsFocused":                           reflect.ValueOf(q.IsFocused),
			"IsFullscreen":                        reflect.ValueOf(q.IsFullscreen),
			"IsGamepadButtonPressed":              reflect.ValueOf(q.IsGamepadButtonPressed),
			"IsKeyPressed":                        reflect.ValueOf(q.IsKeyPressed),
			"IsMouseButtonPressed":                reflect.ValueOf(q.IsMouseButtonPressed),
			"IsRunnableOnUnfocused":               reflect.ValueOf(q.IsRunnableOnUnfocused),
			"IsScreenClearedEveryFrame":           reflect.ValueOf(q.IsScreenClearedEveryFrame),
			"IsScreenFilterEnabled":               reflect.ValueOf(q.IsScreenFilterEnabled),
			"IsScreenTransparent":                 reflect.ValueOf(q.IsScreenTransparent),
			"IsStandardGamepadAxisAvailable":      reflect.ValueOf(q.IsStandardGamepadAxisAvailable),
			"IsStandardGamepadButtonAvailable":    reflect.ValueOf(q.IsStandardGamepadButtonAvailable),
			"IsStandardGamepadButtonPressed":      reflect.ValueOf(q.IsStandardGamepadButtonPressed),
			"IsStandardGamepadLayoutAvailable":    reflect.ValueOf(q.IsStandardGamepadLayoutAvailable),
			"IsVsyncEnabled":                      reflect.ValueOf(q.IsVsyncEnabled),
			"IsWindowBeingClosed":                 reflect.ValueOf(q.IsWindowBeingClosed),
			"IsWindowClosingHandled":              reflect.ValueOf(q.IsWindowClosingHandled),
			"IsWindowDecorated":                   reflect.ValueOf(q.IsWindowDecorated),
			"IsWindowFloating":                    reflect.ValueOf(q.IsWindowFloating),
			"IsWindowMaximized":                   reflect.ValueOf(q.IsWindowMaximized),
			"IsWindowMinimized":                   reflect.ValueOf(q.IsWindowMinimized),
			"IsWindowMousePassthrough":            reflect.ValueOf(q.IsWindowMousePassthrough),
			"IsWindowResizable":                   reflect.ValueOf(q.IsWindowResizable),
			"KeyName":                             reflect.ValueOf(q.KeyName),
			"MaxTPS":                              reflect.ValueOf(q.MaxTPS),
			"MaximizeWindow":                      reflect.ValueOf(q.MaximizeWindow),
			"MinimizeWindow":                      reflect.ValueOf(q.MinimizeWindow),
			"Monitor":                             reflect.ValueOf(q.Monitor),
			"NewImage":                            reflect.ValueOf(q.NewImage),
			"NewImageFromImage":                   reflect.ValueOf(q.NewImageFromImage),
			"NewImageFromImageWithOptions":        reflect.ValueOf(q.NewImageFromImageWithOptions),
			"NewImageWithOptions":                 reflect.ValueOf(q.NewImageWithOptions),
			"NewShader":                           reflect.ValueOf(q.NewShader),
			"ReadDebugInfo":                       reflect.ValueOf(q.ReadDebugInfo),
			"RestoreWindow":                       reflect.ValueOf(q.RestoreWindow),
			"RunGame":                             reflect.ValueOf(q.RunGame),
			"RunGameWithOptions":                  reflect.ValueOf(q.RunGameWithOptions),
			"ScheduleFrame":                       reflect.ValueOf(q.ScheduleFrame),
			"ScreenSizeInFullscreen":              reflect.ValueOf(q.ScreenSizeInFullscreen),
			"SetCursorMode":                       reflect.ValueOf(q.SetCursorMode),
			"SetCursorShape":                      reflect.ValueOf(q.SetCursorShape),
			"SetFPSMode":                          reflect.ValueOf(q.SetFPSMode),
			"SetFullscreen":                       reflect.ValueOf(q.SetFullscreen),
			"SetInitFocused":                      reflect.ValueOf(q.SetInitFocused),
			"SetMaxTPS":                           reflect.ValueOf(q.SetMaxTPS),
			"SetMonitor":                          reflect.ValueOf(q.SetMonitor),
			"SetRunnableOnUnfocused":              reflect.ValueOf(q.SetRunnableOnUnfocused),
			"SetScreenClearedEveryFrame":          reflect.ValueOf(q.SetScreenClearedEveryFrame),
			"SetScreenFilterEnabled":              reflect.ValueOf(q.SetScreenFilterEnabled),
			"SetScreenTransparent":                reflect.ValueOf(q.SetScreenTransparent),
			"SetTPS":                              reflect.ValueOf(q.SetTPS),
			"SetVsyncEnabled":                     reflect.ValueOf(q.SetVsyncEnabled),
			"SetWindowClosingHandled":             reflect.ValueOf(q.SetWindowClosingHandled),
			"SetWindowDecorated":                  reflect.ValueOf(q.SetWindowDecorated),
			"SetWindowFloating":                   reflect.ValueOf(q.SetWindowFloating),
			"SetWindowIcon":                       reflect.ValueOf(q.SetWindowIcon),
			"SetWindowMousePassthrough":           reflect.ValueOf(q.SetWindowMousePassthrough),
			"SetWindowPosition":                   reflect.ValueOf(q.SetWindowPosition),
			"SetWindowResizable":                  reflect.ValueOf(q.SetWindowResizable),
			"SetWindowResizingMode":               reflect.ValueOf(q.SetWindowResizingMode),
			"SetWindowSize":                       reflect.ValueOf(q.SetWindowSize),
			"SetWindowSizeLimits":                 reflect.ValueOf(q.SetWindowSizeLimits),
			"SetWindowTitle":                      reflect.ValueOf(q.SetWindowTitle),
			"StandardGamepadAxisValue":            reflect.ValueOf(q.StandardGamepadAxisValue),
			"StandardGamepadButtonValue":          reflect.ValueOf(q.StandardGamepadButtonValue),
			"TPS":                                 reflect.ValueOf(q.TPS),
			"TouchIDs":                            reflect.ValueOf(q.TouchIDs),
			"TouchPosition":                       reflect.ValueOf(q.TouchPosition),
			"UpdateStandardGamepadLayoutMappings": reflect.ValueOf(q.UpdateStandardGamepadLayoutMappings),
			"Vibrate":                             reflect.ValueOf(q.Vibrate),
			"VibrateGamepad":                      reflect.ValueOf(q.VibrateGamepad),
			"Wheel":                               reflect.ValueOf(q.Wheel),
			"WindowPosition":                      reflect.ValueOf(q.WindowPosition),
			"WindowResizingMode":                  reflect.ValueOf(q.WindowResizingMode),
			"WindowSize":                          reflect.ValueOf(q.WindowSize),
			"WindowSizeLimits":                    reflect.ValueOf(q.WindowSizeLimits),
		},
		TypedConsts: map[string]igop.TypedConst{
			"AddressClampToZero":                     {reflect.TypeOf(q.AddressClampToZero), constant.MakeInt64(int64(q.AddressClampToZero))},
			"AddressRepeat":                          {reflect.TypeOf(q.AddressRepeat), constant.MakeInt64(int64(q.AddressRepeat))},
			"AddressUnsafe":                          {reflect.TypeOf(q.AddressUnsafe), constant.MakeInt64(int64(q.AddressUnsafe))},
			"BlendFactorDefault":                     {reflect.TypeOf(q.BlendFactorDefault), constant.MakeInt64(int64(q.BlendFactorDefault))},
			"BlendFactorDestinationAlpha":            {reflect.TypeOf(q.BlendFactorDestinationAlpha), constant.MakeInt64(int64(q.BlendFactorDestinationAlpha))},
			"BlendFactorDestinationColor":            {reflect.TypeOf(q.BlendFactorDestinationColor), constant.MakeInt64(int64(q.BlendFactorDestinationColor))},
			"BlendFactorOne":                         {reflect.TypeOf(q.BlendFactorOne), constant.MakeInt64(int64(q.BlendFactorOne))},
			"BlendFactorOneMinusDestinationAlpha":    {reflect.TypeOf(q.BlendFactorOneMinusDestinationAlpha), constant.MakeInt64(int64(q.BlendFactorOneMinusDestinationAlpha))},
			"BlendFactorOneMinusDestinationColor":    {reflect.TypeOf(q.BlendFactorOneMinusDestinationColor), constant.MakeInt64(int64(q.BlendFactorOneMinusDestinationColor))},
			"BlendFactorOneMinusSourceAlpha":         {reflect.TypeOf(q.BlendFactorOneMinusSourceAlpha), constant.MakeInt64(int64(q.BlendFactorOneMinusSourceAlpha))},
			"BlendFactorOneMinusSourceColor":         {reflect.TypeOf(q.BlendFactorOneMinusSourceColor), constant.MakeInt64(int64(q.BlendFactorOneMinusSourceColor))},
			"BlendFactorSourceAlpha":                 {reflect.TypeOf(q.BlendFactorSourceAlpha), constant.MakeInt64(int64(q.BlendFactorSourceAlpha))},
			"BlendFactorSourceColor":                 {reflect.TypeOf(q.BlendFactorSourceColor), constant.MakeInt64(int64(q.BlendFactorSourceColor))},
			"BlendFactorZero":                        {reflect.TypeOf(q.BlendFactorZero), constant.MakeInt64(int64(q.BlendFactorZero))},
			"BlendOperationAdd":                      {reflect.TypeOf(q.BlendOperationAdd), constant.MakeInt64(int64(q.BlendOperationAdd))},
			"BlendOperationMax":                      {reflect.TypeOf(q.BlendOperationMax), constant.MakeInt64(int64(q.BlendOperationMax))},
			"BlendOperationMin":                      {reflect.TypeOf(q.BlendOperationMin), constant.MakeInt64(int64(q.BlendOperationMin))},
			"BlendOperationReverseSubtract":          {reflect.TypeOf(q.BlendOperationReverseSubtract), constant.MakeInt64(int64(q.BlendOperationReverseSubtract))},
			"BlendOperationSubtract":                 {reflect.TypeOf(q.BlendOperationSubtract), constant.MakeInt64(int64(q.BlendOperationSubtract))},
			"ColorScaleModePremultipliedAlpha":       {reflect.TypeOf(q.ColorScaleModePremultipliedAlpha), constant.MakeInt64(int64(q.ColorScaleModePremultipliedAlpha))},
			"ColorScaleModeStraightAlpha":            {reflect.TypeOf(q.ColorScaleModeStraightAlpha), constant.MakeInt64(int64(q.ColorScaleModeStraightAlpha))},
			"CompositeModeClear":                     {reflect.TypeOf(q.CompositeModeClear), constant.MakeInt64(int64(q.CompositeModeClear))},
			"CompositeModeCopy":                      {reflect.TypeOf(q.CompositeModeCopy), constant.MakeInt64(int64(q.CompositeModeCopy))},
			"CompositeModeCustom":                    {reflect.TypeOf(q.CompositeModeCustom), constant.MakeInt64(int64(q.CompositeModeCustom))},
			"CompositeModeDestination":               {reflect.TypeOf(q.CompositeModeDestination), constant.MakeInt64(int64(q.CompositeModeDestination))},
			"CompositeModeDestinationAtop":           {reflect.TypeOf(q.CompositeModeDestinationAtop), constant.MakeInt64(int64(q.CompositeModeDestinationAtop))},
			"CompositeModeDestinationIn":             {reflect.TypeOf(q.CompositeModeDestinationIn), constant.MakeInt64(int64(q.CompositeModeDestinationIn))},
			"CompositeModeDestinationOut":            {reflect.TypeOf(q.CompositeModeDestinationOut), constant.MakeInt64(int64(q.CompositeModeDestinationOut))},
			"CompositeModeDestinationOver":           {reflect.TypeOf(q.CompositeModeDestinationOver), constant.MakeInt64(int64(q.CompositeModeDestinationOver))},
			"CompositeModeLighter":                   {reflect.TypeOf(q.CompositeModeLighter), constant.MakeInt64(int64(q.CompositeModeLighter))},
			"CompositeModeMultiply":                  {reflect.TypeOf(q.CompositeModeMultiply), constant.MakeInt64(int64(q.CompositeModeMultiply))},
			"CompositeModeSourceAtop":                {reflect.TypeOf(q.CompositeModeSourceAtop), constant.MakeInt64(int64(q.CompositeModeSourceAtop))},
			"CompositeModeSourceIn":                  {reflect.TypeOf(q.CompositeModeSourceIn), constant.MakeInt64(int64(q.CompositeModeSourceIn))},
			"CompositeModeSourceOut":                 {reflect.TypeOf(q.CompositeModeSourceOut), constant.MakeInt64(int64(q.CompositeModeSourceOut))},
			"CompositeModeSourceOver":                {reflect.TypeOf(q.CompositeModeSourceOver), constant.MakeInt64(int64(q.CompositeModeSourceOver))},
			"CompositeModeXor":                       {reflect.TypeOf(q.CompositeModeXor), constant.MakeInt64(int64(q.CompositeModeXor))},
			"CursorModeCaptured":                     {reflect.TypeOf(q.CursorModeCaptured), constant.MakeInt64(int64(q.CursorModeCaptured))},
			"CursorModeHidden":                       {reflect.TypeOf(q.CursorModeHidden), constant.MakeInt64(int64(q.CursorModeHidden))},
			"CursorModeVisible":                      {reflect.TypeOf(q.CursorModeVisible), constant.MakeInt64(int64(q.CursorModeVisible))},
			"CursorShapeCrosshair":                   {reflect.TypeOf(q.CursorShapeCrosshair), constant.MakeInt64(int64(q.CursorShapeCrosshair))},
			"CursorShapeDefault":                     {reflect.TypeOf(q.CursorShapeDefault), constant.MakeInt64(int64(q.CursorShapeDefault))},
			"CursorShapeEWResize":                    {reflect.TypeOf(q.CursorShapeEWResize), constant.MakeInt64(int64(q.CursorShapeEWResize))},
			"CursorShapeMove":                        {reflect.TypeOf(q.CursorShapeMove), constant.MakeInt64(int64(q.CursorShapeMove))},
			"CursorShapeNESWResize":                  {reflect.TypeOf(q.CursorShapeNESWResize), constant.MakeInt64(int64(q.CursorShapeNESWResize))},
			"CursorShapeNSResize":                    {reflect.TypeOf(q.CursorShapeNSResize), constant.MakeInt64(int64(q.CursorShapeNSResize))},
			"CursorShapeNWSEResize":                  {reflect.TypeOf(q.CursorShapeNWSEResize), constant.MakeInt64(int64(q.CursorShapeNWSEResize))},
			"CursorShapeNotAllowed":                  {reflect.TypeOf(q.CursorShapeNotAllowed), constant.MakeInt64(int64(q.CursorShapeNotAllowed))},
			"CursorShapePointer":                     {reflect.TypeOf(q.CursorShapePointer), constant.MakeInt64(int64(q.CursorShapePointer))},
			"CursorShapeText":                        {reflect.TypeOf(q.CursorShapeText), constant.MakeInt64(int64(q.CursorShapeText))},
			"EvenOdd":                                {reflect.TypeOf(q.EvenOdd), constant.MakeInt64(int64(q.EvenOdd))},
			"FPSModeVsyncOffMaximum":                 {reflect.TypeOf(q.FPSModeVsyncOffMaximum), constant.MakeInt64(int64(q.FPSModeVsyncOffMaximum))},
			"FPSModeVsyncOffMinimum":                 {reflect.TypeOf(q.FPSModeVsyncOffMinimum), constant.MakeInt64(int64(q.FPSModeVsyncOffMinimum))},
			"FPSModeVsyncOn":                         {reflect.TypeOf(q.FPSModeVsyncOn), constant.MakeInt64(int64(q.FPSModeVsyncOn))},
			"FillAll":                                {reflect.TypeOf(q.FillAll), constant.MakeInt64(int64(q.FillAll))},
			"FilterLinear":                           {reflect.TypeOf(q.FilterLinear), constant.MakeInt64(int64(q.FilterLinear))},
			"FilterNearest":                          {reflect.TypeOf(q.FilterNearest), constant.MakeInt64(int64(q.FilterNearest))},
			"GamepadButton0":                         {reflect.TypeOf(q.GamepadButton0), constant.MakeInt64(int64(q.GamepadButton0))},
			"GamepadButton1":                         {reflect.TypeOf(q.GamepadButton1), constant.MakeInt64(int64(q.GamepadButton1))},
			"GamepadButton10":                        {reflect.TypeOf(q.GamepadButton10), constant.MakeInt64(int64(q.GamepadButton10))},
			"GamepadButton11":                        {reflect.TypeOf(q.GamepadButton11), constant.MakeInt64(int64(q.GamepadButton11))},
			"GamepadButton12":                        {reflect.TypeOf(q.GamepadButton12), constant.MakeInt64(int64(q.GamepadButton12))},
			"GamepadButton13":                        {reflect.TypeOf(q.GamepadButton13), constant.MakeInt64(int64(q.GamepadButton13))},
			"GamepadButton14":                        {reflect.TypeOf(q.GamepadButton14), constant.MakeInt64(int64(q.GamepadButton14))},
			"GamepadButton15":                        {reflect.TypeOf(q.GamepadButton15), constant.MakeInt64(int64(q.GamepadButton15))},
			"GamepadButton16":                        {reflect.TypeOf(q.GamepadButton16), constant.MakeInt64(int64(q.GamepadButton16))},
			"GamepadButton17":                        {reflect.TypeOf(q.GamepadButton17), constant.MakeInt64(int64(q.GamepadButton17))},
			"GamepadButton18":                        {reflect.TypeOf(q.GamepadButton18), constant.MakeInt64(int64(q.GamepadButton18))},
			"GamepadButton19":                        {reflect.TypeOf(q.GamepadButton19), constant.MakeInt64(int64(q.GamepadButton19))},
			"GamepadButton2":                         {reflect.TypeOf(q.GamepadButton2), constant.MakeInt64(int64(q.GamepadButton2))},
			"GamepadButton20":                        {reflect.TypeOf(q.GamepadButton20), constant.MakeInt64(int64(q.GamepadButton20))},
			"GamepadButton21":                        {reflect.TypeOf(q.GamepadButton21), constant.MakeInt64(int64(q.GamepadButton21))},
			"GamepadButton22":                        {reflect.TypeOf(q.GamepadButton22), constant.MakeInt64(int64(q.GamepadButton22))},
			"GamepadButton23":                        {reflect.TypeOf(q.GamepadButton23), constant.MakeInt64(int64(q.GamepadButton23))},
			"GamepadButton24":                        {reflect.TypeOf(q.GamepadButton24), constant.MakeInt64(int64(q.GamepadButton24))},
			"GamepadButton25":                        {reflect.TypeOf(q.GamepadButton25), constant.MakeInt64(int64(q.GamepadButton25))},
			"GamepadButton26":                        {reflect.TypeOf(q.GamepadButton26), constant.MakeInt64(int64(q.GamepadButton26))},
			"GamepadButton27":                        {reflect.TypeOf(q.GamepadButton27), constant.MakeInt64(int64(q.GamepadButton27))},
			"GamepadButton28":                        {reflect.TypeOf(q.GamepadButton28), constant.MakeInt64(int64(q.GamepadButton28))},
			"GamepadButton29":                        {reflect.TypeOf(q.GamepadButton29), constant.MakeInt64(int64(q.GamepadButton29))},
			"GamepadButton3":                         {reflect.TypeOf(q.GamepadButton3), constant.MakeInt64(int64(q.GamepadButton3))},
			"GamepadButton30":                        {reflect.TypeOf(q.GamepadButton30), constant.MakeInt64(int64(q.GamepadButton30))},
			"GamepadButton31":                        {reflect.TypeOf(q.GamepadButton31), constant.MakeInt64(int64(q.GamepadButton31))},
			"GamepadButton4":                         {reflect.TypeOf(q.GamepadButton4), constant.MakeInt64(int64(q.GamepadButton4))},
			"GamepadButton5":                         {reflect.TypeOf(q.GamepadButton5), constant.MakeInt64(int64(q.GamepadButton5))},
			"GamepadButton6":                         {reflect.TypeOf(q.GamepadButton6), constant.MakeInt64(int64(q.GamepadButton6))},
			"GamepadButton7":                         {reflect.TypeOf(q.GamepadButton7), constant.MakeInt64(int64(q.GamepadButton7))},
			"GamepadButton8":                         {reflect.TypeOf(q.GamepadButton8), constant.MakeInt64(int64(q.GamepadButton8))},
			"GamepadButton9":                         {reflect.TypeOf(q.GamepadButton9), constant.MakeInt64(int64(q.GamepadButton9))},
			"GamepadButtonMax":                       {reflect.TypeOf(q.GamepadButtonMax), constant.MakeInt64(int64(q.GamepadButtonMax))},
			"GraphicsLibraryAuto":                    {reflect.TypeOf(q.GraphicsLibraryAuto), constant.MakeInt64(int64(q.GraphicsLibraryAuto))},
			"GraphicsLibraryDirectX":                 {reflect.TypeOf(q.GraphicsLibraryDirectX), constant.MakeInt64(int64(q.GraphicsLibraryDirectX))},
			"GraphicsLibraryMetal":                   {reflect.TypeOf(q.GraphicsLibraryMetal), constant.MakeInt64(int64(q.GraphicsLibraryMetal))},
			"GraphicsLibraryOpenGL":                  {reflect.TypeOf(q.GraphicsLibraryOpenGL), constant.MakeInt64(int64(q.GraphicsLibraryOpenGL))},
			"GraphicsLibraryPlayStation5":            {reflect.TypeOf(q.GraphicsLibraryPlayStation5), constant.MakeInt64(int64(q.GraphicsLibraryPlayStation5))},
			"GraphicsLibraryUnknown":                 {reflect.TypeOf(q.GraphicsLibraryUnknown), constant.MakeInt64(int64(q.GraphicsLibraryUnknown))},
			"Key0":                                   {reflect.TypeOf(q.Key0), constant.MakeInt64(int64(q.Key0))},
			"Key1":                                   {reflect.TypeOf(q.Key1), constant.MakeInt64(int64(q.Key1))},
			"Key2":                                   {reflect.TypeOf(q.Key2), constant.MakeInt64(int64(q.Key2))},
			"Key3":                                   {reflect.TypeOf(q.Key3), constant.MakeInt64(int64(q.Key3))},
			"Key4":                                   {reflect.TypeOf(q.Key4), constant.MakeInt64(int64(q.Key4))},
			"Key5":                                   {reflect.TypeOf(q.Key5), constant.MakeInt64(int64(q.Key5))},
			"Key6":                                   {reflect.TypeOf(q.Key6), constant.MakeInt64(int64(q.Key6))},
			"Key7":                                   {reflect.TypeOf(q.Key7), constant.MakeInt64(int64(q.Key7))},
			"Key8":                                   {reflect.TypeOf(q.Key8), constant.MakeInt64(int64(q.Key8))},
			"Key9":                                   {reflect.TypeOf(q.Key9), constant.MakeInt64(int64(q.Key9))},
			"KeyA":                                   {reflect.TypeOf(q.KeyA), constant.MakeInt64(int64(q.KeyA))},
			"KeyAlt":                                 {reflect.TypeOf(q.KeyAlt), constant.MakeInt64(int64(q.KeyAlt))},
			"KeyAltLeft":                             {reflect.TypeOf(q.KeyAltLeft), constant.MakeInt64(int64(q.KeyAltLeft))},
			"KeyAltRight":                            {reflect.TypeOf(q.KeyAltRight), constant.MakeInt64(int64(q.KeyAltRight))},
			"KeyApostrophe":                          {reflect.TypeOf(q.KeyApostrophe), constant.MakeInt64(int64(q.KeyApostrophe))},
			"KeyArrowDown":                           {reflect.TypeOf(q.KeyArrowDown), constant.MakeInt64(int64(q.KeyArrowDown))},
			"KeyArrowLeft":                           {reflect.TypeOf(q.KeyArrowLeft), constant.MakeInt64(int64(q.KeyArrowLeft))},
			"KeyArrowRight":                          {reflect.TypeOf(q.KeyArrowRight), constant.MakeInt64(int64(q.KeyArrowRight))},
			"KeyArrowUp":                             {reflect.TypeOf(q.KeyArrowUp), constant.MakeInt64(int64(q.KeyArrowUp))},
			"KeyB":                                   {reflect.TypeOf(q.KeyB), constant.MakeInt64(int64(q.KeyB))},
			"KeyBackquote":                           {reflect.TypeOf(q.KeyBackquote), constant.MakeInt64(int64(q.KeyBackquote))},
			"KeyBackslash":                           {reflect.TypeOf(q.KeyBackslash), constant.MakeInt64(int64(q.KeyBackslash))},
			"KeyBackspace":                           {reflect.TypeOf(q.KeyBackspace), constant.MakeInt64(int64(q.KeyBackspace))},
			"KeyBracketLeft":                         {reflect.TypeOf(q.KeyBracketLeft), constant.MakeInt64(int64(q.KeyBracketLeft))},
			"KeyBracketRight":                        {reflect.TypeOf(q.KeyBracketRight), constant.MakeInt64(int64(q.KeyBracketRight))},
			"KeyC":                                   {reflect.TypeOf(q.KeyC), constant.MakeInt64(int64(q.KeyC))},
			"KeyCapsLock":                            {reflect.TypeOf(q.KeyCapsLock), constant.MakeInt64(int64(q.KeyCapsLock))},
			"KeyComma":                               {reflect.TypeOf(q.KeyComma), constant.MakeInt64(int64(q.KeyComma))},
			"KeyContextMenu":                         {reflect.TypeOf(q.KeyContextMenu), constant.MakeInt64(int64(q.KeyContextMenu))},
			"KeyControl":                             {reflect.TypeOf(q.KeyControl), constant.MakeInt64(int64(q.KeyControl))},
			"KeyControlLeft":                         {reflect.TypeOf(q.KeyControlLeft), constant.MakeInt64(int64(q.KeyControlLeft))},
			"KeyControlRight":                        {reflect.TypeOf(q.KeyControlRight), constant.MakeInt64(int64(q.KeyControlRight))},
			"KeyD":                                   {reflect.TypeOf(q.KeyD), constant.MakeInt64(int64(q.KeyD))},
			"KeyDelete":                              {reflect.TypeOf(q.KeyDelete), constant.MakeInt64(int64(q.KeyDelete))},
			"KeyDigit0":                              {reflect.TypeOf(q.KeyDigit0), constant.MakeInt64(int64(q.KeyDigit0))},
			"KeyDigit1":                              {reflect.TypeOf(q.KeyDigit1), constant.MakeInt64(int64(q.KeyDigit1))},
			"KeyDigit2":                              {reflect.TypeOf(q.KeyDigit2), constant.MakeInt64(int64(q.KeyDigit2))},
			"KeyDigit3":                              {reflect.TypeOf(q.KeyDigit3), constant.MakeInt64(int64(q.KeyDigit3))},
			"KeyDigit4":                              {reflect.TypeOf(q.KeyDigit4), constant.MakeInt64(int64(q.KeyDigit4))},
			"KeyDigit5":                              {reflect.TypeOf(q.KeyDigit5), constant.MakeInt64(int64(q.KeyDigit5))},
			"KeyDigit6":                              {reflect.TypeOf(q.KeyDigit6), constant.MakeInt64(int64(q.KeyDigit6))},
			"KeyDigit7":                              {reflect.TypeOf(q.KeyDigit7), constant.MakeInt64(int64(q.KeyDigit7))},
			"KeyDigit8":                              {reflect.TypeOf(q.KeyDigit8), constant.MakeInt64(int64(q.KeyDigit8))},
			"KeyDigit9":                              {reflect.TypeOf(q.KeyDigit9), constant.MakeInt64(int64(q.KeyDigit9))},
			"KeyDown":                                {reflect.TypeOf(q.KeyDown), constant.MakeInt64(int64(q.KeyDown))},
			"KeyE":                                   {reflect.TypeOf(q.KeyE), constant.MakeInt64(int64(q.KeyE))},
			"KeyEnd":                                 {reflect.TypeOf(q.KeyEnd), constant.MakeInt64(int64(q.KeyEnd))},
			"KeyEnter":                               {reflect.TypeOf(q.KeyEnter), constant.MakeInt64(int64(q.KeyEnter))},
			"KeyEqual":                               {reflect.TypeOf(q.KeyEqual), constant.MakeInt64(int64(q.KeyEqual))},
			"KeyEscape":                              {reflect.TypeOf(q.KeyEscape), constant.MakeInt64(int64(q.KeyEscape))},
			"KeyF":                                   {reflect.TypeOf(q.KeyF), constant.MakeInt64(int64(q.KeyF))},
			"KeyF1":                                  {reflect.TypeOf(q.KeyF1), constant.MakeInt64(int64(q.KeyF1))},
			"KeyF10":                                 {reflect.TypeOf(q.KeyF10), constant.MakeInt64(int64(q.KeyF10))},
			"KeyF11":                                 {reflect.TypeOf(q.KeyF11), constant.MakeInt64(int64(q.KeyF11))},
			"KeyF12":                                 {reflect.TypeOf(q.KeyF12), constant.MakeInt64(int64(q.KeyF12))},
			"KeyF13":                                 {reflect.TypeOf(q.KeyF13), constant.MakeInt64(int64(q.KeyF13))},
			"KeyF14":                                 {reflect.TypeOf(q.KeyF14), constant.MakeInt64(int64(q.KeyF14))},
			"KeyF15":                                 {reflect.TypeOf(q.KeyF15), constant.MakeInt64(int64(q.KeyF15))},
			"KeyF16":                                 {reflect.TypeOf(q.KeyF16), constant.MakeInt64(int64(q.KeyF16))},
			"KeyF17":                                 {reflect.TypeOf(q.KeyF17), constant.MakeInt64(int64(q.KeyF17))},
			"KeyF18":                                 {reflect.TypeOf(q.KeyF18), constant.MakeInt64(int64(q.KeyF18))},
			"KeyF19":                                 {reflect.TypeOf(q.KeyF19), constant.MakeInt64(int64(q.KeyF19))},
			"KeyF2":                                  {reflect.TypeOf(q.KeyF2), constant.MakeInt64(int64(q.KeyF2))},
			"KeyF20":                                 {reflect.TypeOf(q.KeyF20), constant.MakeInt64(int64(q.KeyF20))},
			"KeyF21":                                 {reflect.TypeOf(q.KeyF21), constant.MakeInt64(int64(q.KeyF21))},
			"KeyF22":                                 {reflect.TypeOf(q.KeyF22), constant.MakeInt64(int64(q.KeyF22))},
			"KeyF23":                                 {reflect.TypeOf(q.KeyF23), constant.MakeInt64(int64(q.KeyF23))},
			"KeyF24":                                 {reflect.TypeOf(q.KeyF24), constant.MakeInt64(int64(q.KeyF24))},
			"KeyF3":                                  {reflect.TypeOf(q.KeyF3), constant.MakeInt64(int64(q.KeyF3))},
			"KeyF4":                                  {reflect.TypeOf(q.KeyF4), constant.MakeInt64(int64(q.KeyF4))},
			"KeyF5":                                  {reflect.TypeOf(q.KeyF5), constant.MakeInt64(int64(q.KeyF5))},
			"KeyF6":                                  {reflect.TypeOf(q.KeyF6), constant.MakeInt64(int64(q.KeyF6))},
			"KeyF7":                                  {reflect.TypeOf(q.KeyF7), constant.MakeInt64(int64(q.KeyF7))},
			"KeyF8":                                  {reflect.TypeOf(q.KeyF8), constant.MakeInt64(int64(q.KeyF8))},
			"KeyF9":                                  {reflect.TypeOf(q.KeyF9), constant.MakeInt64(int64(q.KeyF9))},
			"KeyG":                                   {reflect.TypeOf(q.KeyG), constant.MakeInt64(int64(q.KeyG))},
			"KeyGraveAccent":                         {reflect.TypeOf(q.KeyGraveAccent), constant.MakeInt64(int64(q.KeyGraveAccent))},
			"KeyH":                                   {reflect.TypeOf(q.KeyH), constant.MakeInt64(int64(q.KeyH))},
			"KeyHome":                                {reflect.TypeOf(q.KeyHome), constant.MakeInt64(int64(q.KeyHome))},
			"KeyI":                                   {reflect.TypeOf(q.KeyI), constant.MakeInt64(int64(q.KeyI))},
			"KeyInsert":                              {reflect.TypeOf(q.KeyInsert), constant.MakeInt64(int64(q.KeyInsert))},
			"KeyIntlBackslash":                       {reflect.TypeOf(q.KeyIntlBackslash), constant.MakeInt64(int64(q.KeyIntlBackslash))},
			"KeyJ":                                   {reflect.TypeOf(q.KeyJ), constant.MakeInt64(int64(q.KeyJ))},
			"KeyK":                                   {reflect.TypeOf(q.KeyK), constant.MakeInt64(int64(q.KeyK))},
			"KeyKP0":                                 {reflect.TypeOf(q.KeyKP0), constant.MakeInt64(int64(q.KeyKP0))},
			"KeyKP1":                                 {reflect.TypeOf(q.KeyKP1), constant.MakeInt64(int64(q.KeyKP1))},
			"KeyKP2":                                 {reflect.TypeOf(q.KeyKP2), constant.MakeInt64(int64(q.KeyKP2))},
			"KeyKP3":                                 {reflect.TypeOf(q.KeyKP3), constant.MakeInt64(int64(q.KeyKP3))},
			"KeyKP4":                                 {reflect.TypeOf(q.KeyKP4), constant.MakeInt64(int64(q.KeyKP4))},
			"KeyKP5":                                 {reflect.TypeOf(q.KeyKP5), constant.MakeInt64(int64(q.KeyKP5))},
			"KeyKP6":                                 {reflect.TypeOf(q.KeyKP6), constant.MakeInt64(int64(q.KeyKP6))},
			"KeyKP7":                                 {reflect.TypeOf(q.KeyKP7), constant.MakeInt64(int64(q.KeyKP7))},
			"KeyKP8":                                 {reflect.TypeOf(q.KeyKP8), constant.MakeInt64(int64(q.KeyKP8))},
			"KeyKP9":                                 {reflect.TypeOf(q.KeyKP9), constant.MakeInt64(int64(q.KeyKP9))},
			"KeyKPAdd":                               {reflect.TypeOf(q.KeyKPAdd), constant.MakeInt64(int64(q.KeyKPAdd))},
			"KeyKPDecimal":                           {reflect.TypeOf(q.KeyKPDecimal), constant.MakeInt64(int64(q.KeyKPDecimal))},
			"KeyKPDivide":                            {reflect.TypeOf(q.KeyKPDivide), constant.MakeInt64(int64(q.KeyKPDivide))},
			"KeyKPEnter":                             {reflect.TypeOf(q.KeyKPEnter), constant.MakeInt64(int64(q.KeyKPEnter))},
			"KeyKPEqual":                             {reflect.TypeOf(q.KeyKPEqual), constant.MakeInt64(int64(q.KeyKPEqual))},
			"KeyKPMultiply":                          {reflect.TypeOf(q.KeyKPMultiply), constant.MakeInt64(int64(q.KeyKPMultiply))},
			"KeyKPSubtract":                          {reflect.TypeOf(q.KeyKPSubtract), constant.MakeInt64(int64(q.KeyKPSubtract))},
			"KeyL":                                   {reflect.TypeOf(q.KeyL), constant.MakeInt64(int64(q.KeyL))},
			"KeyLeft":                                {reflect.TypeOf(q.KeyLeft), constant.MakeInt64(int64(q.KeyLeft))},
			"KeyLeftBracket":                         {reflect.TypeOf(q.KeyLeftBracket), constant.MakeInt64(int64(q.KeyLeftBracket))},
			"KeyM":                                   {reflect.TypeOf(q.KeyM), constant.MakeInt64(int64(q.KeyM))},
			"KeyMax":                                 {reflect.TypeOf(q.KeyMax), constant.MakeInt64(int64(q.KeyMax))},
			"KeyMenu":                                {reflect.TypeOf(q.KeyMenu), constant.MakeInt64(int64(q.KeyMenu))},
			"KeyMeta":                                {reflect.TypeOf(q.KeyMeta), constant.MakeInt64(int64(q.KeyMeta))},
			"KeyMetaLeft":                            {reflect.TypeOf(q.KeyMetaLeft), constant.MakeInt64(int64(q.KeyMetaLeft))},
			"KeyMetaRight":                           {reflect.TypeOf(q.KeyMetaRight), constant.MakeInt64(int64(q.KeyMetaRight))},
			"KeyMinus":                               {reflect.TypeOf(q.KeyMinus), constant.MakeInt64(int64(q.KeyMinus))},
			"KeyN":                                   {reflect.TypeOf(q.KeyN), constant.MakeInt64(int64(q.KeyN))},
			"KeyNumLock":                             {reflect.TypeOf(q.KeyNumLock), constant.MakeInt64(int64(q.KeyNumLock))},
			"KeyNumpad0":                             {reflect.TypeOf(q.KeyNumpad0), constant.MakeInt64(int64(q.KeyNumpad0))},
			"KeyNumpad1":                             {reflect.TypeOf(q.KeyNumpad1), constant.MakeInt64(int64(q.KeyNumpad1))},
			"KeyNumpad2":                             {reflect.TypeOf(q.KeyNumpad2), constant.MakeInt64(int64(q.KeyNumpad2))},
			"KeyNumpad3":                             {reflect.TypeOf(q.KeyNumpad3), constant.MakeInt64(int64(q.KeyNumpad3))},
			"KeyNumpad4":                             {reflect.TypeOf(q.KeyNumpad4), constant.MakeInt64(int64(q.KeyNumpad4))},
			"KeyNumpad5":                             {reflect.TypeOf(q.KeyNumpad5), constant.MakeInt64(int64(q.KeyNumpad5))},
			"KeyNumpad6":                             {reflect.TypeOf(q.KeyNumpad6), constant.MakeInt64(int64(q.KeyNumpad6))},
			"KeyNumpad7":                             {reflect.TypeOf(q.KeyNumpad7), constant.MakeInt64(int64(q.KeyNumpad7))},
			"KeyNumpad8":                             {reflect.TypeOf(q.KeyNumpad8), constant.MakeInt64(int64(q.KeyNumpad8))},
			"KeyNumpad9":                             {reflect.TypeOf(q.KeyNumpad9), constant.MakeInt64(int64(q.KeyNumpad9))},
			"KeyNumpadAdd":                           {reflect.TypeOf(q.KeyNumpadAdd), constant.MakeInt64(int64(q.KeyNumpadAdd))},
			"KeyNumpadDecimal":                       {reflect.TypeOf(q.KeyNumpadDecimal), constant.MakeInt64(int64(q.KeyNumpadDecimal))},
			"KeyNumpadDivide":                        {reflect.TypeOf(q.KeyNumpadDivide), constant.MakeInt64(int64(q.KeyNumpadDivide))},
			"KeyNumpadEnter":                         {reflect.TypeOf(q.KeyNumpadEnter), constant.MakeInt64(int64(q.KeyNumpadEnter))},
			"KeyNumpadEqual":                         {reflect.TypeOf(q.KeyNumpadEqual), constant.MakeInt64(int64(q.KeyNumpadEqual))},
			"KeyNumpadMultiply":                      {reflect.TypeOf(q.KeyNumpadMultiply), constant.MakeInt64(int64(q.KeyNumpadMultiply))},
			"KeyNumpadSubtract":                      {reflect.TypeOf(q.KeyNumpadSubtract), constant.MakeInt64(int64(q.KeyNumpadSubtract))},
			"KeyO":                                   {reflect.TypeOf(q.KeyO), constant.MakeInt64(int64(q.KeyO))},
			"KeyP":                                   {reflect.TypeOf(q.KeyP), constant.MakeInt64(int64(q.KeyP))},
			"KeyPageDown":                            {reflect.TypeOf(q.KeyPageDown), constant.MakeInt64(int64(q.KeyPageDown))},
			"KeyPageUp":                              {reflect.TypeOf(q.KeyPageUp), constant.MakeInt64(int64(q.KeyPageUp))},
			"KeyPause":                               {reflect.TypeOf(q.KeyPause), constant.MakeInt64(int64(q.KeyPause))},
			"KeyPeriod":                              {reflect.TypeOf(q.KeyPeriod), constant.MakeInt64(int64(q.KeyPeriod))},
			"KeyPrintScreen":                         {reflect.TypeOf(q.KeyPrintScreen), constant.MakeInt64(int64(q.KeyPrintScreen))},
			"KeyQ":                                   {reflect.TypeOf(q.KeyQ), constant.MakeInt64(int64(q.KeyQ))},
			"KeyQuote":                               {reflect.TypeOf(q.KeyQuote), constant.MakeInt64(int64(q.KeyQuote))},
			"KeyR":                                   {reflect.TypeOf(q.KeyR), constant.MakeInt64(int64(q.KeyR))},
			"KeyRight":                               {reflect.TypeOf(q.KeyRight), constant.MakeInt64(int64(q.KeyRight))},
			"KeyRightBracket":                        {reflect.TypeOf(q.KeyRightBracket), constant.MakeInt64(int64(q.KeyRightBracket))},
			"KeyS":                                   {reflect.TypeOf(q.KeyS), constant.MakeInt64(int64(q.KeyS))},
			"KeyScrollLock":                          {reflect.TypeOf(q.KeyScrollLock), constant.MakeInt64(int64(q.KeyScrollLock))},
			"KeySemicolon":                           {reflect.TypeOf(q.KeySemicolon), constant.MakeInt64(int64(q.KeySemicolon))},
			"KeyShift":                               {reflect.TypeOf(q.KeyShift), constant.MakeInt64(int64(q.KeyShift))},
			"KeyShiftLeft":                           {reflect.TypeOf(q.KeyShiftLeft), constant.MakeInt64(int64(q.KeyShiftLeft))},
			"KeyShiftRight":                          {reflect.TypeOf(q.KeyShiftRight), constant.MakeInt64(int64(q.KeyShiftRight))},
			"KeySlash":                               {reflect.TypeOf(q.KeySlash), constant.MakeInt64(int64(q.KeySlash))},
			"KeySpace":                               {reflect.TypeOf(q.KeySpace), constant.MakeInt64(int64(q.KeySpace))},
			"KeyT":                                   {reflect.TypeOf(q.KeyT), constant.MakeInt64(int64(q.KeyT))},
			"KeyTab":                                 {reflect.TypeOf(q.KeyTab), constant.MakeInt64(int64(q.KeyTab))},
			"KeyU":                                   {reflect.TypeOf(q.KeyU), constant.MakeInt64(int64(q.KeyU))},
			"KeyUp":                                  {reflect.TypeOf(q.KeyUp), constant.MakeInt64(int64(q.KeyUp))},
			"KeyV":                                   {reflect.TypeOf(q.KeyV), constant.MakeInt64(int64(q.KeyV))},
			"KeyW":                                   {reflect.TypeOf(q.KeyW), constant.MakeInt64(int64(q.KeyW))},
			"KeyX":                                   {reflect.TypeOf(q.KeyX), constant.MakeInt64(int64(q.KeyX))},
			"KeyY":                                   {reflect.TypeOf(q.KeyY), constant.MakeInt64(int64(q.KeyY))},
			"KeyZ":                                   {reflect.TypeOf(q.KeyZ), constant.MakeInt64(int64(q.KeyZ))},
			"MouseButton0":                           {reflect.TypeOf(q.MouseButton0), constant.MakeInt64(int64(q.MouseButton0))},
			"MouseButton1":                           {reflect.TypeOf(q.MouseButton1), constant.MakeInt64(int64(q.MouseButton1))},
			"MouseButton2":                           {reflect.TypeOf(q.MouseButton2), constant.MakeInt64(int64(q.MouseButton2))},
			"MouseButton3":                           {reflect.TypeOf(q.MouseButton3), constant.MakeInt64(int64(q.MouseButton3))},
			"MouseButton4":                           {reflect.TypeOf(q.MouseButton4), constant.MakeInt64(int64(q.MouseButton4))},
			"MouseButtonLeft":                        {reflect.TypeOf(q.MouseButtonLeft), constant.MakeInt64(int64(q.MouseButtonLeft))},
			"MouseButtonMax":                         {reflect.TypeOf(q.MouseButtonMax), constant.MakeInt64(int64(q.MouseButtonMax))},
			"MouseButtonMiddle":                      {reflect.TypeOf(q.MouseButtonMiddle), constant.MakeInt64(int64(q.MouseButtonMiddle))},
			"MouseButtonRight":                       {reflect.TypeOf(q.MouseButtonRight), constant.MakeInt64(int64(q.MouseButtonRight))},
			"NonZero":                                {reflect.TypeOf(q.NonZero), constant.MakeInt64(int64(q.NonZero))},
			"StandardGamepadAxisLeftStickHorizontal": {reflect.TypeOf(q.StandardGamepadAxisLeftStickHorizontal), constant.MakeInt64(int64(q.StandardGamepadAxisLeftStickHorizontal))},
			"StandardGamepadAxisLeftStickVertical":   {reflect.TypeOf(q.StandardGamepadAxisLeftStickVertical), constant.MakeInt64(int64(q.StandardGamepadAxisLeftStickVertical))},
			"StandardGamepadAxisMax":                 {reflect.TypeOf(q.StandardGamepadAxisMax), constant.MakeInt64(int64(q.StandardGamepadAxisMax))},
			"StandardGamepadAxisRightStickHorizontal": {reflect.TypeOf(q.StandardGamepadAxisRightStickHorizontal), constant.MakeInt64(int64(q.StandardGamepadAxisRightStickHorizontal))},
			"StandardGamepadAxisRightStickVertical":   {reflect.TypeOf(q.StandardGamepadAxisRightStickVertical), constant.MakeInt64(int64(q.StandardGamepadAxisRightStickVertical))},
			"StandardGamepadButtonCenterCenter":       {reflect.TypeOf(q.StandardGamepadButtonCenterCenter), constant.MakeInt64(int64(q.StandardGamepadButtonCenterCenter))},
			"StandardGamepadButtonCenterLeft":         {reflect.TypeOf(q.StandardGamepadButtonCenterLeft), constant.MakeInt64(int64(q.StandardGamepadButtonCenterLeft))},
			"StandardGamepadButtonCenterRight":        {reflect.TypeOf(q.StandardGamepadButtonCenterRight), constant.MakeInt64(int64(q.StandardGamepadButtonCenterRight))},
			"StandardGamepadButtonFrontBottomLeft":    {reflect.TypeOf(q.StandardGamepadButtonFrontBottomLeft), constant.MakeInt64(int64(q.StandardGamepadButtonFrontBottomLeft))},
			"StandardGamepadButtonFrontBottomRight":   {reflect.TypeOf(q.StandardGamepadButtonFrontBottomRight), constant.MakeInt64(int64(q.StandardGamepadButtonFrontBottomRight))},
			"StandardGamepadButtonFrontTopLeft":       {reflect.TypeOf(q.StandardGamepadButtonFrontTopLeft), constant.MakeInt64(int64(q.StandardGamepadButtonFrontTopLeft))},
			"StandardGamepadButtonFrontTopRight":      {reflect.TypeOf(q.StandardGamepadButtonFrontTopRight), constant.MakeInt64(int64(q.StandardGamepadButtonFrontTopRight))},
			"StandardGamepadButtonLeftBottom":         {reflect.TypeOf(q.StandardGamepadButtonLeftBottom), constant.MakeInt64(int64(q.StandardGamepadButtonLeftBottom))},
			"StandardGamepadButtonLeftLeft":           {reflect.TypeOf(q.StandardGamepadButtonLeftLeft), constant.MakeInt64(int64(q.StandardGamepadButtonLeftLeft))},
			"StandardGamepadButtonLeftRight":          {reflect.TypeOf(q.StandardGamepadButtonLeftRight), constant.MakeInt64(int64(q.StandardGamepadButtonLeftRight))},
			"StandardGamepadButtonLeftStick":          {reflect.TypeOf(q.StandardGamepadButtonLeftStick), constant.MakeInt64(int64(q.StandardGamepadButtonLeftStick))},
			"StandardGamepadButtonLeftTop":            {reflect.TypeOf(q.StandardGamepadButtonLeftTop), constant.MakeInt64(int64(q.StandardGamepadButtonLeftTop))},
			"StandardGamepadButtonMax":                {reflect.TypeOf(q.StandardGamepadButtonMax), constant.MakeInt64(int64(q.StandardGamepadButtonMax))},
			"StandardGamepadButtonRightBottom":        {reflect.TypeOf(q.StandardGamepadButtonRightBottom), constant.MakeInt64(int64(q.StandardGamepadButtonRightBottom))},
			"StandardGamepadButtonRightLeft":          {reflect.TypeOf(q.StandardGamepadButtonRightLeft), constant.MakeInt64(int64(q.StandardGamepadButtonRightLeft))},
			"StandardGamepadButtonRightRight":         {reflect.TypeOf(q.StandardGamepadButtonRightRight), constant.MakeInt64(int64(q.StandardGamepadButtonRightRight))},
			"StandardGamepadButtonRightStick":         {reflect.TypeOf(q.StandardGamepadButtonRightStick), constant.MakeInt64(int64(q.StandardGamepadButtonRightStick))},
			"StandardGamepadButtonRightTop":           {reflect.TypeOf(q.StandardGamepadButtonRightTop), constant.MakeInt64(int64(q.StandardGamepadButtonRightTop))},
			"WindowResizingModeDisabled":              {reflect.TypeOf(q.WindowResizingModeDisabled), constant.MakeInt64(int64(q.WindowResizingModeDisabled))},
			"WindowResizingModeEnabled":               {reflect.TypeOf(q.WindowResizingModeEnabled), constant.MakeInt64(int64(q.WindowResizingModeEnabled))},
			"WindowResizingModeOnlyFullscreenEnabled": {reflect.TypeOf(q.WindowResizingModeOnlyFullscreenEnabled), constant.MakeInt64(int64(q.WindowResizingModeOnlyFullscreenEnabled))},
		},
		UntypedConsts: map[string]igop.UntypedConst{
			"ColorMDim":        {"untyped int", constant.MakeInt64(int64(q.ColorMDim))},
			"DefaultTPS":       {"untyped int", constant.MakeInt64(int64(q.DefaultTPS))},
			"GeoMDim":          {"untyped int", constant.MakeInt64(int64(q.GeoMDim))},
			"MaxIndicesCount":  {"untyped int", constant.MakeInt64(int64(q.MaxIndicesCount))},
			"MaxIndicesNum":    {"untyped int", constant.MakeInt64(int64(q.MaxIndicesNum))},
			"MaxVertexCount":   {"untyped int", constant.MakeInt64(int64(q.MaxVertexCount))},
			"MaxVerticesCount": {"untyped int", constant.MakeInt64(int64(q.MaxVerticesCount))},
			"SyncWithFPS":      {"untyped int", constant.MakeInt64(int64(q.SyncWithFPS))},
			"UncappedTPS":      {"untyped int", constant.MakeInt64(int64(q.UncappedTPS))},
		},
	})
}
