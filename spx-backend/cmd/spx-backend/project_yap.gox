import (
	"context"
	"os"
	"strconv"

	"github.com/goplus/builder/spx-backend/internal/controller"
	"github.com/goplus/builder/spx-backend/internal/model"
	"github.com/goplus/builder/spx-backend/internal/utils"
	"github.com/goplus/builder/spx-backend/internal/utils/log"
	"github.com/goplus/builder/spx-backend/internal/utils/user"
)

var (
	ctrl *controller.Controller
)

// Add project
post "/project", ctx => {
	u, ok := ensureUser(ctx)
	if !ok {
		return
	}
	params := &controller.AddProjectParams{}
	if ok = parseJson(ctx, params); !ok {
		return
	}
	params.Owner = u.Name
	if ok, msg := params.Validate(); !ok {
		replyWithCodeMsg(ctx, errorInvalidArgs, msg)
		return
	}
	res, err := ctrl.AddProject(utils.getCtx(ctx), params)
	if err != nil {
		handlerInnerError(ctx, err)
		return
	}
	replyWithData(ctx, res)
}

// Update project
put "/project/:owner/:name", ctx => {
	if _, ok := ensureUser(ctx); !ok {
		return
	}
	owner := ctx.param("owner")
	name := ctx.param("name")
	updates := &controller.UpdateProjectParams{}
	if ok := parseJson(ctx, updates); !ok {
		return
	}
	if ok, msg := updates.Validate(); !ok {
		replyWithCodeMsg(ctx, errorInvalidArgs, msg)
		return
	}
	res, err := ctrl.UpdateProject(utils.getCtx(ctx), owner, name, updates)
	if err != nil {
		handlerInnerError(ctx, err)
		return
	}
	replyWithData(ctx, res)
}

// Get project
get "/project/:owner/:name", ctx => {
	owner := ctx.param("owner")
	name := ctx.param("name")
	res, err := ctrl.GetProject(utils.getCtx(ctx), owner, name)
	if err != nil {
		handlerInnerError(ctx, err)
		return
	}
	replyWithData(ctx, res)
}

// Delete project
delete "/project/:owner/:name", ctx => {
	owner := ctx.param("owner")
	name := ctx.param("name")
	err := ctrl.DeleteProject(utils.getCtx(ctx), owner, name)
	if err != nil {
		handlerInnerError(ctx, err)
		return
	}
	replyWithData(ctx, nil)
}

const (
	firstPageIndex  = 1
	defaultPageSize = 10
)

// List projects
get "/projects/list", ctx => {
	u, _ := user.GetUser(utils.GetCtx(ctx))
	params := &controller.ProjectListParams{}

	if isPublicInput := ctx.param("isPublic"); isPublicInput != "" {
		isPublicInt, err := strconv.Atoi(isPublicInput)
		if err != nil {
			replyWithCode(ctx, errorInvalidArgs)
			return
		}
		isPublic := model.IsPublic(isPublicInt)
		params.IsPublic = &isPublic
	}

	switch ownerInput := ctx.param("owner"); ownerInput {
	case "":
		if u == nil {
			replyWithCode(ctx, errorUnauthorized)
			return
		}
		params.Owner = &u.Name
	case "*":
		params.Owner = nil
	default:
		params.Owner = &ownerInput
	}

	params.Pagination.Index = ctx.ParamInt("pageIndex", firstPageIndex)
	params.Pagination.Size = ctx.ParamInt("pageSize", defaultPageSize)
	if ok, msg := params.Validate(); !ok {
		replyWithCodeMsg(ctx, errorInvalidArgs, msg)
		return
	}

	result, err := ctrl.ListProject(utils.getCtx(ctx), params)
	if err != nil {
		handlerInnerError(ctx, err)
		return
	}
	replyWithData(ctx, result)
}

// Add asset
post "/asset", ctx => {
	u, ok := ensureUser(ctx)
	if !ok {
		return
	}
	params := &controller.AddAssetParams{}
	if ok = parseJson(ctx, params); !ok {
		return
	}
	params.Owner = u.Name
	if ok, msg := params.Validate(); !ok {
		replyWithCodeMsg(ctx, errorInvalidArgs, msg)
		return
	}
	res, err := ctrl.AddAsset(utils.getCtx(ctx), params)
	if err != nil {
		handlerInnerError(ctx, err)
		return
	}
	replyWithData(ctx, res)
}

// Update asset
put "/asset/:id", ctx => {
	if _, ok := ensureUser(ctx); !ok {
		return
	}
	id := ctx.param("id")
	updates := &controller.UpdateAssetParams{}
	if ok := parseJson(ctx, updates); !ok {
		return
	}
	if ok, msg := updates.Validate(); !ok {
		replyWithCodeMsg(ctx, errorInvalidArgs, msg)
		return
	}
	res, err := ctrl.UpdateAsset(utils.getCtx(ctx), id, updates)
	if err != nil {
		handlerInnerError(ctx, err)
		return
	}
	replyWithData(ctx, res)
}

// Get asset by id
get "/asset/:id", ctx => {
	id := ctx.param("id")
	res, err := ctrl.GetAsset(utils.getCtx(ctx), id)
	if err != nil {
		handlerInnerError(ctx, err)
		return
	}
	replyWithData(ctx, res)
}

// List assets
get "/assets/list", ctx => {
	u, _ := user.GetUser(utils.GetCtx(ctx))
	params := &controller.AssetListParams{}

	params.Keyword = ctx.param("keyword")
	if assetTypeInput := ctx.param("assetType"); assetTypeInput != "" {
		assetTypeInt, err := strconv.Atoi(assetTypeInput)
		if err != nil {
			replyWithCode(ctx, errorInvalidArgs)
			return
		}
		assetType := model.AssetType(assetTypeInt)
		params.AssetType = &assetType
	}
	if categoryInput := ctx.param("category"); categoryInput != "" {
		params.Category = &categoryInput
	}
	if isPublicInput := ctx.param("isPublic"); isPublicInput != "" {
		isPublicInt, err := strconv.Atoi(isPublicInput)
		if err != nil {
			replyWithCode(ctx, errorInvalidArgs)
			return
		}
		isPublic := model.IsPublic(isPublicInt)
		params.IsPublic = &isPublic
	}

	switch ownerInput := ctx.param("owner"); ownerInput {
	case "":
		if u == nil {
			replyWithCode(ctx, errorUnauthorized)
			return
		}
		params.Owner = &u.Name
	case "*":
		params.Owner = nil
	default:
		params.Owner = &ownerInput
	}

	if orderByInput := ctx.param("orderBy"); orderByInput != "" {
		params.OrderBy = controller.OrderBy(orderByInput)
	}
	params.Pagination.Index = ctx.ParamInt("pageIndex", firstPageIndex)
	params.Pagination.Size = ctx.ParamInt("pageSize", defaultPageSize)
	if ok, msg := params.Validate(); !ok {
		replyWithCodeMsg(ctx, errorInvalidArgs, msg)
		return
	}

	result, err := ctrl.ListAsset(utils.getCtx(ctx), params)
	if err != nil {
		handlerInnerError(ctx, err)
		return
	}
	replyWithData(ctx, result)
}

// Increase asset clickCount
post "/asset/:id/click", ctx => {
	id := ctx.param("id")
	err := ctrl.IncreaseAssetClickCount(utils.getCtx(ctx), id)
	if err != nil {
		handlerInnerError(ctx, err)
		return
	}
	replyWithData(ctx, nil)
}

// Delete asset
delete "/asset/:id", ctx => {
	id := ctx.param("id")
	err := ctrl.DeleteAsset(utils.getCtx(ctx), id)
	if err != nil {
		handlerInnerError(ctx, err)
		return
	}
	replyWithData(ctx, nil)
}

// Format code
post "/util/fmtcode", ctx => {
	input := &controller.FmtCodeInput{}
	if ok := parseJson(ctx, input); !ok {
		return
	}
	res, err := ctrl.FmtCode(utils.getCtx(ctx), input)
	if err != nil {
		handlerInnerError(ctx, err)
		return
	}
	replyWithData(ctx, res)
}

// Get info for uploading
get "/util/upinfo", ctx => {
	if _, ok := ensureUser(ctx); !ok {
		return
	}
	upInfo, err := ctrl.GetUpInfo(utils.getCtx(ctx))
	if err != nil {
		handlerInnerError(ctx, err)
		return
	}
	replyWithData(ctx, upInfo)
}

// Make file urls for downloading
post "/util/fileurls", ctx => {
	if _, ok := ensureUser(ctx); !ok {
		return
	}
	params := &controller.MakeFileURLsParams{}
	if ok := parseJson(ctx, params); !ok {
		return
	}
	fileURLs, err := ctrl.MakeFileURLs(utils.getCtx(ctx), params)
	if err != nil {
		handlerInnerError(ctx, err)
		return
	}
	replyWithData(ctx, fileURLs)
}

var err error
logger := log.GetLogger()
ctrl, err = controller.NewController(context.Background())
if err != nil {
	logger.Fatalln("New controller failed:", err)
}
user.CasdoorConfigInit()
port := os.Getenv("PORT")
if port == "" {
	port = ":8080"
}
logger.Printf("Listening to %s", port)
run port, UserMiddleware, ReqIDMiddleware, CorsMiddleware
